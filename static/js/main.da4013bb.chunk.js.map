{"version":3,"sources":["redux/phoneBook/phoneBookActions.js","components/ContactForm/ContactForm.js","functions/isNameAvailable.js","components/ContactList/Contact.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/NightRegimeToggler/NightRegimeToggler.js","pages/PhoneBookPage.js","components/Layout/Layout.js","App.js","redux/phoneBook/phoneBookReducer.js","redux/store.js","index.js","styles.module.css"],"names":["addContact","createAction","name","number","payload","contact","id","uuidv4","deleteContact","filteredContacts","clearFilterValue","nightRegimeToggler","ContactForm","state","handleInputChange","e","preventDefault","target","value","setState","handleSubmit","contacts","props","person","some","item","alert","submitContactInfo","this","night","onSubmit","className","styles","type","onChange","Component","connect","phonebook","dispatch","Contact","removeContact","onClick","contactList","filter","toLowerCase","includes","deleteItem","map","key","mapDispatchToProps","onChangeFilter","clearFilter","length","onToggle","nightRegime","PhoneBookPage","children","layoutDay","layoutNight","container","App","createReducer","action","combineReducers","store","configureStore","reducer","phoneBookReducer","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.da4013bb.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst addContact = createAction('phoneBook/addContact', (name, number) => ({\r\n  payload: {\r\n    contact: {\r\n      id: uuidv4(),\r\n      name,\r\n      number,\r\n    },\r\n  },\r\n}));\r\n\r\nconst deleteContact = createAction('phoneBook/deleteContact');\r\nconst filteredContacts = createAction('phoneBook/filteredContacts');\r\nconst clearFilterValue = createAction('phoneBook/clearFilterValue');\r\nconst nightRegimeToggler = createAction('phoneBook/nightRegimeToggler');\r\n\r\nexport {\r\n  addContact,\r\n  deleteContact,\r\n  filteredContacts,\r\n  clearFilterValue,\r\n  nightRegimeToggler,\r\n};\r\n","import React, { Component } from 'react';\r\nimport T from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { addContact } from '../../redux/phoneBook/phoneBookActions';\r\nimport isNameAvailable from '../../functions/isNameAvailable';\r\nimport styles from '../../styles.module.css';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  propTypes = {\r\n    submitContactInfo: T.func.isRequired,\r\n    night: T.bool.isRequired,\r\n    contacts: T.arrayOf.isRequired,\r\n  };\r\n\r\n  handleInputChange = e => {\r\n    e.preventDefault();\r\n    const { name, value } = e.target;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    if (isNameAvailable(this.props.contacts, this.state.name)) {\r\n      return alert(`${this.state.name} is already exists in contacts!`);\r\n    }\r\n    this.props.submitContactInfo(this.state);\r\n\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    const { night } = this.props;\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <h3 className={night && styles.night}>Name</h3>\r\n          <input\r\n            type=\"name\"\r\n            value={name}\r\n            onChange={this.handleInputChange}\r\n            name=\"name\"\r\n          />\r\n          <h3 className={night && styles.night}>Number</h3>\r\n          <input\r\n            type=\"number\"\r\n            value={number}\r\n            onChange={this.handleInputChange}\r\n            name=\"number\"\r\n          />\r\n          <button type=\"submit\">Add contact</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: state.phonebook.contacts,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  submitContactInfo: ({ name, number }) => dispatch(addContact(name, number)),\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(ContactForm);\r\n","export default function isNameAvailable(contacts, person) {\r\n  return contacts.some(item => item.name === person);\r\n}\r\n","import React from 'react';\r\nimport T from 'prop-types';\r\n\r\nconst Contact = ({ name, number, removeContact, id }) => (\r\n  <li>\r\n    <p>\r\n      {name}: {number}\r\n    </p>\r\n    <button type=\"button\" onClick={() => removeContact(id)}>\r\n      Delete {name} from contact list\r\n    </button>\r\n  </li>\r\n);\r\n\r\nContact.propTypes = {\r\n  name: T.string.isRequired,\r\n  number: T.string.isRequired,\r\n  removeContact: T.func.isRequired,\r\n  id: T.string.isRequired,\r\n};\r\n\r\nexport default Contact;\r\n","import React from 'react';\r\nimport T from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { deleteContact } from '../../redux/phoneBook/phoneBookActions';\r\nimport Contact from './Contact';\r\n\r\nfunction ContactList({ contactList, deleteItem }) {\r\n  return (\r\n    <ul>\r\n      {contactList.map(({ id, name, number }) => (\r\n        <Contact\r\n          key={id}\r\n          id={id}\r\n          name={name}\r\n          number={number}\r\n          removeContact={() => deleteItem(id)}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contactList: T.arrayOf({}).isRequired,\r\n  deleteItem: T.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = ({ phonebook }, { id }) => {\r\n  const visibleContacts = phonebook.contacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(phonebook.filter.toLowerCase()),\r\n  );\r\n\r\n  return {\r\n    contactList: visibleContacts,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  deleteItem: id => dispatch(deleteContact(id)),\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(ContactList);\r\n","import React from 'react';\r\nimport T from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  filteredContacts,\r\n  clearFilterValue,\r\n} from '../../redux/phoneBook/phoneBookActions';\r\n\r\nfunction Filter({ contacts, value, onChangeFilter, clearFilter }) {\r\n  if (contacts.length === 1) {\r\n    clearFilter();\r\n  }\r\n  return (\r\n    <>\r\n      {contacts.length > 1 && (\r\n        <div>\r\n          <input value={value} onChange={e => onChangeFilter(e.target.value)} />\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  value: T.string.isRequired,\r\n  onChangeFilter: T.func.isRequired,\r\n  contacts: T.shape.isRequired,\r\n  clearFilter: T.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  value: state.filter,\r\n  contacts: state.phonebook.contacts,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onChangeFilter: filteredContacts,\r\n  clearFilter: clearFilterValue,\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(Filter);\r\n","import React from 'react';\r\nimport T from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { nightRegimeToggler } from '../../redux/phoneBook/phoneBookActions';\r\n\r\nconst NightRegimeToggler = ({ nightRegime, onToggle }) => (\r\n  <>\r\n    <button type=\"button\" onClick={() => onToggle()}>\r\n      {nightRegime ? 'Night Regime' : 'Day Regime'}\r\n    </button>\r\n  </>\r\n);\r\n\r\nNightRegimeToggler.propTypes = {\r\n  nightRegime: T.bool.isRequired,\r\n  onToggle: T.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  nightRegime: state.phonebook.nightRegime,\r\n});\r\n\r\nconst mapDispatchToProps = { onToggle: nightRegimeToggler };\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(NightRegimeToggler);\r\n","import React from 'react';\r\nimport ContactForm from '../components/ContactForm/ContactForm';\r\nimport ContactList from '../components/ContactList/ContactList';\r\nimport Filter from '../components/Filter/Filter';\r\nimport NightRegimeToggler from '../components/NightRegimeToggler/NightRegimeToggler';\r\n\r\nconst PhoneBookPage = () => {\r\n  return (\r\n    <>\r\n      <NightRegimeToggler />\r\n      <ContactForm />\r\n      <Filter />\r\n      <ContactList />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PhoneBookPage;\r\n","import React from 'react';\r\nimport T from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport styles from '../../styles.module.css';\r\n\r\nconst Layout = ({ children, nightRegime }) => (\r\n  <div className={nightRegime ? styles.layoutDay : styles.layoutNight}>\r\n    <div className={styles.container}>{children}</div>\r\n  </div>\r\n);\r\n\r\nLayout.propTypes = {\r\n  children: T.shape.isRequired,\r\n  nightRegime: T.bool.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  nightRegime: state.phonebook.nightRegime,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Layout);\r\n","import React from 'react';\r\nimport PhoneBookPage from './pages/PhoneBookPage';\r\nimport Layout from './components/Layout/Layout';\r\n\r\nconst App = () => (\r\n  <Layout>\r\n    <PhoneBookPage />\r\n  </Layout>\r\n);\r\nexport default App;\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addContact,\r\n  deleteContact,\r\n  filteredContacts,\r\n  clearFilterValue,\r\n  nightRegimeToggler,\r\n} from './phoneBookActions';\r\n\r\nconst contacts = createReducer([], {\r\n  [addContact.type]: (state, { payload }) => [...state, payload.contact],\r\n  [deleteContact.type]: (state, { payload }) =>\r\n    state.filter(contact => payload !== contact.id),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [clearFilterValue.type]: (state, action) => '',\r\n  [filteredContacts.type]: (state, { payload }) => payload,\r\n});\r\n\r\nconst nightRegime = createReducer(true, {\r\n  [nightRegimeToggler]: state => !state,\r\n});\r\n\r\nexport default combineReducers({ contacts, nightRegime, filter });\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport phoneBookReducer from './phoneBook/phoneBookReducer';\r\n\r\nconst store = configureStore({\r\n  reducer: { phonebook: phoneBookReducer },\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layoutDay\":\"styles_layoutDay__NLbta\",\"layoutNight\":\"styles_layoutNight__16lVb\",\"night\":\"styles_night__1xg54\"};"],"sourceRoot":""}